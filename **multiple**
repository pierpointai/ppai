\`\`\`ts
// lib/compare-store.ts
import { create } from "zustand";
import { immer } from "zustand/middleware/immer"

interface CompareState {
  comparedOfferIds: string[];
  addComparedOfferId: (offerId: string) => void;
  removeComparedOfferId: (offerId: string) => void;
  clearComparedOfferIds: () => void;
}

export const useCompareStore = create<CompareState>()(
  immer((set) => ({
    comparedOfferIds: [],
    addComparedOfferId: (offerId) =>
      set((state) => {
        if (!state.comparedOfferIds.includes(offerId)) {
          state.comparedOfferIds.push(offerId);
        }
      }),
    removeComparedOfferId: (offerId) =>
      set((state) => {
        state.comparedOfferIds = state.comparedOfferIds.filter(
          (id) => id !== offerId
        );
      }),
    clearComparedOfferIds: () =>
      set((state) => {
        state.comparedOfferIds = [];
      }),
  }))
);

// lib/offer-store.ts
import { create } from "zustand";
import { immer } from "zustand/middleware/immer"

interface OfferState {
  selectedOfferId: string | null;
  setSelectedOfferId: (offerId: string | null) => void;
}

export const useOfferStore = create<OfferState>()(
  immer((set) => ({
    selectedOfferId: null,
    setSelectedOfferId: (offerId) =>
      set((state) => {
        state.selectedOfferId = offerId;
      }),
  }))
);

// lib/enhanced-matching.ts
import { create } from "zustand";
import { immer } from "zustand/middleware/immer"

interface EnhancedMatchingState {
  isEnhancedMatchingEnabled: boolean;
  setIsEnhancedMatchingEnabled: (enabled: boolean) => void;
}

export const useEnhancedMatchingStore = create<EnhancedMatchingState>()(
  immer((set) => ({
    isEnhancedMatchingEnabled: false,
    setIsEnhancedMatchingEnabled: (enabled) =>
      set((state) => {
        state.isEnhancedMatchingEnabled = enabled;
      }),
  }))
);

// lib/store/navigation-store.ts
import { create } from "zustand";
import { immer } from "zustand/middleware/immer"

interface NavigationState {
  currentPath: string;
  setCurrentPath: (path: string) => void;
}

export const useNavigationStore = create<NavigationState>()(
  immer((set) => ({
    currentPath: "/",
    setCurrentPath: (path) =>
      set((state) => {
        state.currentPath = path;
      }),
  }))
);

// lib/store/offer-store.ts
import { create } from "zustand";
import { immer } from "zustand/middleware/immer"

interface OfferStoreState {
  offers: any[]; // Replace 'any' with your offer type
  setOffers: (offers: any[]) => void; // Replace 'any' with your offer type
}

export const useOfferStore2 = create<OfferStoreState>()(
  immer((set) => ({
    offers: [],
    setOffers: (offers) =>
      set((state) => {
        state.offers = offers;
      }),
  }))
);
\`\`\`
